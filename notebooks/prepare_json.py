#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import os
from pathlib import Path

def parse_instruct_pairs(file_path):
    """
    –ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª instruct_pairs –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
    —Ñ–æ—Ä–º–∞—Ç–∞ {"instruction": str, "answer": str}
    
    Args:
        file_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É instruct_pairs
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–∞—Ä–∞–º–∏ instruction/answer
    """
    pairs = []
    
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –±–ª–æ–∫–∏ –ø–æ "======="
        blocks = content.split('=======')
        
        for block in blocks:
            block = block.strip()
            if not block:
                continue
                
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ instruction –∏ answer –ø–æ "===="
            if '====' in block:
                parts = block.split('====')
                if len(parts) >= 2:
                    instruction = parts[0].strip()
                    answer = parts[1].strip()
                    
                    if instruction and answer:
                        pairs.append({
                            "instruction": instruction,
                            "answer": answer
                        })
                        
    except FileNotFoundError:
        print(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return []
    
    return pairs

def save_to_json(data, output_file):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
    
    Args:
        data (list): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        output_file (str): –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É JSON —Ñ–∞–π–ª—É
    """
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ {output_file}: {e}")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ instruct_pairs
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    script_dir = Path(__file__).parent.parent
    
    # –§–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    input_files = [
        script_dir / "instruct_pairs.txt",
        script_dir / "instruct_pairs_v1.txt",
        script_dir / "instruct_pairsv0.txt"
    ]
    
    all_pairs = []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for file_path in input_files:
        if file_path.exists():
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {file_path}")
            pairs = parse_instruct_pairs(file_path)
            print(f"–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä –≤ {file_path.name}: {len(pairs)}")
            all_pairs.extend(pairs)
        else:
            print(f"–§–∞–π–ª {file_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    unique_pairs = []
    seen = set()
    
    for pair in all_pairs:
        # –°–æ–∑–¥–∞–µ–º —Ö—ç—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        pair_hash = hash((pair["instruction"], pair["answer"]))
        if pair_hash not in seen:
            seen.add(pair_hash)
            unique_pairs.append(pair)
    
    print(f"\n–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä: {len(all_pairs)}")
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä: {len(unique_pairs)}")
    
    if unique_pairs:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
        output_file = script_dir / "instruct_dataset.json"
        save_to_json(unique_pairs, output_file)
        
        # –í—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –ø–æ–ª—É—á–∏–≤—à–µ–º—Å—è —Ñ–∞–π–ª–µ
        with open(output_file, 'r', encoding='utf-8') as f:
            line_count = sum(1 for line in f)
        
        print("\n" + "="*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò:")
        print("="*60)
        print(f"üìÑ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_file}")
        print(f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ JSON —Ñ–∞–π–ª–µ: {line_count}")
        print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ: {len(unique_pairs)}")
        print("="*60)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
        if unique_pairs:
            print(f"\nüí° –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏:")
            print(json.dumps(unique_pairs[0], ensure_ascii=False, indent=2))
    else:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–ª–∏–¥–Ω–æ–π –ø–∞—Ä—ã instruction/answer")

if __name__ == "__main__":
    main()
